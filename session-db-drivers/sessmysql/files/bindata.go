// Code generated by go-bindata.
// sources:
// ../raw/create.sql
// DO NOT EDIT!

package files

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _RawCreateSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x51\x51\x6b\xfa\x30\x1c\x7c\xf7\x53\xfc\xde\x4c\xc1\x87\xbf\xff\xc1\x18\x0c\x1f\xa2\xfe\xdc\xc2\x6a\xdc\x6a\x0a\xf3\xc9\x54\x9b\x69\x60\x4b\xa4\x49\x61\xfb\xf6\x6b\x22\xa4\x0e\x26\x7b\xea\xf5\x2e\x17\xee\x2e\xb3\x02\xa9\x40\x10\x74\x9a\x23\xb0\x05\xf0\x95\x00\x7c\x65\x6b\xb1\x06\x79\xb0\x3b\x6b\xbd\xdb\x3a\xe5\x9c\xae\x25\x90\x01\x80\x0c\x40\x1b\x4f\xc6\xe3\x0c\x5a\xe3\xf4\xc1\xa8\x3a\xba\x78\x99\xe7\x40\x4b\xb1\xda\x32\xde\xdd\xba\x44\x2e\x46\xc1\x10\xad\xfb\x63\xd5\x90\x9b\xdb\x0c\x66\x8f\xb4\xa0\x33\x81\x05\xac\x51\x40\xe5\xf6\x5a\xf7\xee\x39\x2e\x68\x99\x0b\x18\x0e\xa3\xd3\xeb\x0f\x25\xa1\xae\xbc\x0a\x28\x1d\x8b\x5a\x7b\x0a\x7c\x7d\x4d\x56\x9f\x27\xdd\x28\x77\x4d\xee\xd8\x4a\xc2\xee\xdd\xee\xce\x11\x8f\xb6\xf1\x7f\x58\xe2\x99\xbd\x6d\x8d\x97\xe0\xb5\xf9\x0a\x1b\xfc\xff\x6d\x82\x54\xe2\x5f\x6c\xf1\x5c\xb0\x25\x2d\x36\xf0\x84\x1b\x20\x61\xbd\x2c\xb0\x25\x67\x2f\x25\x46\xf2\x3c\x10\x89\x9f\xa8\x45\x32\xf5\x23\x09\xf6\x62\x8a\x4a\x12\xec\xc5\xcb\xa0\xe4\xf2\x6f\xf4\xb3\x67\x36\xc8\x00\xf9\x03\xe3\x38\x61\xc6\xd8\xf9\x34\x25\x0f\x6f\xd4\xbd\xce\xa4\xf5\x6f\x77\xf7\xdf\x01\x00\x00\xff\xff\x57\x5c\xa1\x2a\x21\x02\x00\x00")

func RawCreateSqlBytes() ([]byte, error) {
	return bindataRead(
		_RawCreateSql,
		"../raw/create.sql",
	)
}

func RawCreateSql() (*asset, error) {
	bytes, err := RawCreateSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../raw/create.sql", size: 545, mode: os.FileMode(420), modTime: time.Unix(1498747398, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../raw/create.sql": RawCreateSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"raw": &bintree{nil, map[string]*bintree{
			"create.sql": &bintree{RawCreateSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
